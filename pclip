#!/usr/bin/perl

use warnings;
use strict;
use Getopt::Long;

my $ip = "dev";
my $delim = "AaAaAaAaAaKAKABbBbBb";
my $shared = "/Users/ozelikov/Downloads/shared-dev/";
my $remote_shared = "~/vm/shared/mac";
my $tmp_file = "/tmp/pclip_tmp.txt";

GetOptions(
    "ip=s" => \$ip,
    "shared=s" => \$shared,
    "help" => sub { print("Usage: pclip [-ip=<ip>]\n"); exit(1); }
);

sub main
{
    print("Starting - ".localtime()."\n");
    my $fh;

    my $prev_remote_data = "";
    my $prev_local_data;
    my $prev_shared_files;

    while (1)
    {
        my $remote_data = get_message(\$fh);
        last if not defined $remote_data;

        $prev_remote_data = $remote_data if not defined $prev_remote_data;

        if ($remote_data ne $prev_remote_data) {
            print "****** NEW REMOTE DATA ******\n";
            print "'$remote_data'\n";
            print "*****************************\n";
            copy_to_local_clipboard($remote_data);
            $prev_remote_data = $remote_data;
            $prev_local_data = undef;
        }

        my $local_data = read_local_clipboard();
        $prev_local_data = $local_data if not defined $prev_local_data;
        if ($local_data ne $prev_local_data) {
            #print "len: ", length($prev_local_data), "'$prev_local_data'\n";
            print "****** NEW LOCAL DATA *******\n";
            print "len: ", length($local_data) ," '$local_data'\n";
            print "*****************************\n";
            $prev_local_data = $local_data;
            $prev_remote_data = undef;
            copy_to_remote_clipboard($ip, $local_data);
            print "Copied to remote clipboard\n";
        }

        my @files = sort glob("$shared/*");
        send_new_files($prev_shared_files, \@files);
        $prev_shared_files = \@files;
    }

    return 0;
}

sub connect_to_remote
{
    open(my $fh, "ssh -o ConnectTimeout=10 -o ServerAliveCountMax=2 -o ServerAliveInterval=60 $ip 'while true; do DISPLAY=:0 xsel -o; echo $delim; sleep 1; done'|");

    print("ssh command failed, $!\n") if not $fh;
    print("connected to remote\n") if $fh;

    return $fh;
}

sub send_new_files
{
    my ($old_files, $new_files) = @_;

    return if not defined $old_files;

    my %old = map{ $_ => 1 } @$old_files;
    my @added = grep { not $old{$_} } @$new_files;


    my @ignored = grep { $_ =~ /Unconfirmed/ } @added;
    @added = grep { $_ !~ /Unconfirmed/ } @added;

    if (@ignored) {
        print "****** SKIPPING FILES *******\n";
        print("$_\n") foreach @ignored;
        print "*****************************\n";
    }

    if (@added) {
        print "****** COPYING FILES *******\n";
        system("scp '$_' $ip:$remote_shared") foreach @added;
        print "*****************************\n";
    }
}

my $get_message_buf = "";
my $last_status_time = time;
sub get_message
{
    my ($pfh) = @_;

    $$pfh = connect_to_remote() if not $$pfh;
    my $fh = $$pfh;
    if (not $fh) {
        sleep(10);
        return "";
    }

    while (my $line = <$fh>)
    {
        if (not $line) {
            print("got empty line from remote machine\n");
            return "";
        }
        #print "got: '$line'\n";
        $get_message_buf .= $line;
        my ($msg, $rest) = split /$delim\n/m, $get_message_buf;
        if (defined $msg and defined $rest) {
            $get_message_buf = $rest;
            #print "msg: '$msg'\n";
            #print "rest: '$rest'\n";
            return $msg;
        }
    }
    print localtime()." - No message from peer, disconnecting\n";
    close($fh);
    $$pfh = undef;
    return "";
}

sub read_local_clipboard
{
    # my $out = `powershell.exe Get-Clipboard`;
    my $out = `pbpaste`;
    $out = "" if not defined $out;
    $out =~ s/\r\n$//m;

    #print $out, "\n";
    return $out;
}

sub copy_to_local_clipboard
{
    my ($remote_data) = @_;
    open(my $fh, ">$tmp_file") or die "couldn't open $tmp_file for writing, $!";
    print $fh $remote_data;
    close($fh);
    system("pbcopy < $tmp_file");
    print("updated local clipboard\n");
}

sub copy_to_remote_clipboard
{
    my ($ip, $data) = @_;
    open(my $fh, "| ssh $ip 'cat -|DISPLAY=:0 xsel -i'")
        or die "ssh...xsel command failed $!";
    print $fh "$data";
    print("updated remote clipboard\n");
}

exit main();
